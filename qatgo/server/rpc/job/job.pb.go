// Code generated by protoc-gen-go. DO NOT EDIT.
// source: job.proto

/*
Package jobserver is a generated protocol buffer package.

It is generated from these files:
	job.proto

It has these top-level messages:
	JobRequest
	JobReply
	RsaRequest
	RsaReply
	EcdsaSignRequest
	EcdsaSignReply
	EcdsaVerifyRequest
	EcdsaVerifyReply
*/
package jobserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type JobRequest struct {
	OpType  int32  `protobuf:"varint,1,opt,name=opType" json:"opType,omitempty"`
	Sni     string `protobuf:"bytes,2,opt,name=sni" json:"sni,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *JobRequest) Reset()                    { *m = JobRequest{} }
func (m *JobRequest) String() string            { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()               {}
func (*JobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobRequest) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *JobRequest) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *JobRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// The response message containing the greetings
type JobReply struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *JobReply) Reset()                    { *m = JobReply{} }
func (m *JobReply) String() string            { return proto.CompactTextString(m) }
func (*JobReply) ProtoMessage()               {}
func (*JobReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *JobReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// The request message containing the user's name.
type RsaRequest struct {
	OpType  int32  `protobuf:"varint,1,opt,name=opType" json:"opType,omitempty"`
	Sni     string `protobuf:"bytes,2,opt,name=sni" json:"sni,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RsaRequest) Reset()                    { *m = RsaRequest{} }
func (m *RsaRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaRequest) ProtoMessage()               {}
func (*RsaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RsaRequest) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *RsaRequest) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *RsaRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// The response message containing the greetings
type RsaReply struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *RsaReply) Reset()                    { *m = RsaReply{} }
func (m *RsaReply) String() string            { return proto.CompactTextString(m) }
func (*RsaReply) ProtoMessage()               {}
func (*RsaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RsaReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RsaReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EcdsaSignRequest struct {
	OpType int32  `protobuf:"varint,1,opt,name=opType" json:"opType,omitempty"`
	Sni    string `protobuf:"bytes,2,opt,name=sni" json:"sni,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *EcdsaSignRequest) Reset()                    { *m = EcdsaSignRequest{} }
func (m *EcdsaSignRequest) String() string            { return proto.CompactTextString(m) }
func (*EcdsaSignRequest) ProtoMessage()               {}
func (*EcdsaSignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EcdsaSignRequest) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *EcdsaSignRequest) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *EcdsaSignRequest) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type EcdsaSignReply struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	R      []byte `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S      []byte `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *EcdsaSignReply) Reset()                    { *m = EcdsaSignReply{} }
func (m *EcdsaSignReply) String() string            { return proto.CompactTextString(m) }
func (*EcdsaSignReply) ProtoMessage()               {}
func (*EcdsaSignReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EcdsaSignReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EcdsaSignReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EcdsaSignReply) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *EcdsaSignReply) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type EcdsaVerifyRequest struct {
	OpType int32  `protobuf:"varint,1,opt,name=opType" json:"opType,omitempty"`
	Sni    string `protobuf:"bytes,2,opt,name=sni" json:"sni,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	R      []byte `protobuf:"bytes,4,opt,name=r,proto3" json:"r,omitempty"`
	S      []byte `protobuf:"bytes,5,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *EcdsaVerifyRequest) Reset()                    { *m = EcdsaVerifyRequest{} }
func (m *EcdsaVerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*EcdsaVerifyRequest) ProtoMessage()               {}
func (*EcdsaVerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EcdsaVerifyRequest) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *EcdsaVerifyRequest) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *EcdsaVerifyRequest) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *EcdsaVerifyRequest) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *EcdsaVerifyRequest) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type EcdsaVerifyReply struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Verify bool   `protobuf:"varint,3,opt,name=verify" json:"verify,omitempty"`
}

func (m *EcdsaVerifyReply) Reset()                    { *m = EcdsaVerifyReply{} }
func (m *EcdsaVerifyReply) String() string            { return proto.CompactTextString(m) }
func (*EcdsaVerifyReply) ProtoMessage()               {}
func (*EcdsaVerifyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EcdsaVerifyReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EcdsaVerifyReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EcdsaVerifyReply) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

func init() {
	proto.RegisterType((*JobRequest)(nil), "jobserver.JobRequest")
	proto.RegisterType((*JobReply)(nil), "jobserver.JobReply")
	proto.RegisterType((*RsaRequest)(nil), "jobserver.RsaRequest")
	proto.RegisterType((*RsaReply)(nil), "jobserver.RsaReply")
	proto.RegisterType((*EcdsaSignRequest)(nil), "jobserver.EcdsaSignRequest")
	proto.RegisterType((*EcdsaSignReply)(nil), "jobserver.EcdsaSignReply")
	proto.RegisterType((*EcdsaVerifyRequest)(nil), "jobserver.EcdsaVerifyRequest")
	proto.RegisterType((*EcdsaVerifyReply)(nil), "jobserver.EcdsaVerifyReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for JobServer service

type JobServerClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobReply, error)
}

type jobServerClient struct {
	cc *grpc.ClientConn
}

func NewJobServerClient(cc *grpc.ClientConn) JobServerClient {
	return &jobServerClient{cc}
}

func (c *jobServerClient) SayHello(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobReply, error) {
	out := new(JobReply)
	err := grpc.Invoke(ctx, "/jobserver.JobServer/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobServer service

type JobServerServer interface {
	// Sends a greeting
	SayHello(context.Context, *JobRequest) (*JobReply, error)
}

func RegisterJobServerServer(s *grpc.Server, srv JobServerServer) {
	s.RegisterService(&_JobServer_serviceDesc, srv)
}

func _JobServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobserver.JobServer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServerServer).SayHello(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobserver.JobServer",
	HandlerType: (*JobServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _JobServer_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job.proto",
}

func init() { proto.RegisterFile("job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0x4f, 0x6b, 0x83, 0x30,
	0x18, 0xc6, 0x97, 0xb5, 0x75, 0xfa, 0x52, 0x46, 0xc9, 0x98, 0xc8, 0x4e, 0xe2, 0xc9, 0x93, 0x87,
	0x6d, 0x87, 0x7d, 0x81, 0xc2, 0xe8, 0x69, 0xc4, 0xd2, 0x7b, 0x9c, 0x99, 0x38, 0x6c, 0x93, 0xe5,
	0xb5, 0x85, 0x7c, 0xfb, 0x91, 0x68, 0xf6, 0xa7, 0x37, 0xa1, 0xb7, 0xf7, 0x11, 0xfc, 0x3d, 0x3f,
	0xe5, 0x81, 0xe8, 0x53, 0x56, 0x85, 0xd2, 0xb2, 0x97, 0xd4, 0x9e, 0x28, 0xf4, 0x49, 0xe8, 0xec,
	0x0d, 0x60, 0x23, 0x2b, 0x26, 0xbe, 0x8e, 0x02, 0x7b, 0x1a, 0x43, 0x20, 0xd5, 0xd6, 0x28, 0x91,
	0x90, 0x94, 0xe4, 0x0b, 0x36, 0x26, 0xba, 0x82, 0x19, 0x1e, 0xda, 0xe4, 0x3a, 0x25, 0x79, 0xc4,
	0xec, 0x49, 0x13, 0xb8, 0x51, 0xdc, 0x74, 0x92, 0xd7, 0xc9, 0x2c, 0x25, 0xf9, 0x92, 0xf9, 0x98,
	0x3d, 0x43, 0xe8, 0x88, 0xaa, 0x33, 0x96, 0x87, 0x3d, 0xef, 0x8f, 0xe8, 0x79, 0x43, 0xb2, 0xbc,
	0x3d, 0x36, 0x9e, 0xb7, 0xc7, 0xc6, 0x7a, 0x30, 0xe4, 0x17, 0xf6, 0x70, 0xc4, 0x69, 0x1e, 0x5b,
	0x58, 0xad, 0xdf, 0x6b, 0xe4, 0x65, 0xdb, 0x1c, 0xa6, 0xdb, 0xc4, 0x10, 0xd4, 0x6d, 0x23, 0xb0,
	0x1f, 0x65, 0xc6, 0x94, 0xed, 0xe0, 0xf6, 0x0f, 0x75, 0x92, 0x11, 0x5d, 0x02, 0xd1, 0x23, 0x8e,
	0x68, 0x9b, 0x30, 0x99, 0x0f, 0x09, 0x33, 0x0d, 0xd4, 0x71, 0x77, 0x42, 0xb7, 0x1f, 0xe6, 0x62,
	0xbe, 0x43, 0xe7, 0xfc, 0x5f, 0xe7, 0xc2, 0x77, 0xfa, 0x3f, 0xe4, 0x3b, 0xa7, 0x7d, 0x4d, 0x0c,
	0xc1, 0xc9, 0xbd, 0xe8, 0x1a, 0x43, 0x36, 0xa6, 0xc7, 0x35, 0x44, 0x1b, 0x59, 0x95, 0x6e, 0x94,
	0xf4, 0x05, 0xc2, 0x92, 0x9b, 0x57, 0xd1, 0x75, 0x92, 0xde, 0x17, 0x3f, 0x63, 0x2d, 0x7e, 0x97,
	0xfa, 0x70, 0x77, 0xfe, 0x58, 0x75, 0x26, 0xbb, 0xaa, 0x02, 0x37, 0xf0, 0xa7, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa7, 0xd2, 0x68, 0x97, 0xed, 0x02, 0x00, 0x00,
}
