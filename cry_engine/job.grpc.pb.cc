// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: job.proto

#include "job.pb.h"
#include "job.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace jobserver {

static const char* JobServer_method_names[] = {
  "/jobserver.JobServer/SayHello",
};

std::unique_ptr< JobServer::Stub> JobServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< JobServer::Stub> stub(new JobServer::Stub(channel));
  return stub;
}

JobServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(JobServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JobServer::Stub::SayHello(::grpc::ClientContext* context, const ::jobserver::JobRequest& request, ::jobserver::JobReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::jobserver::JobReply>* JobServer::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::jobserver::JobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::jobserver::JobReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

JobServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      JobServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< JobServer::Service, ::jobserver::JobRequest, ::jobserver::JobReply>(
          std::mem_fn(&JobServer::Service::SayHello), this)));
}

JobServer::Service::~Service() {
}

::grpc::Status JobServer::Service::SayHello(::grpc::ServerContext* context, const ::jobserver::JobRequest* request, ::jobserver::JobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace jobserver

